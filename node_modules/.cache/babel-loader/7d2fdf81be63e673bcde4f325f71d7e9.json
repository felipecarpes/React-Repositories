{"ast":null,"code":"import _slicedToArray from \"/home/felipe/desafio5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/felipe/desafio5/src/pages/Repository/index.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\nimport Container from '../../components/Container';\nimport { Loading, Owner, IssueList, Selected } from './styles';\nexport default class Repository extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      repository: {},\n      issues: [],\n      loading: true,\n      filters: [{\n        state: 'all',\n        label: 'Todas',\n        active: true\n      }, {\n        state: 'open',\n        label: 'Abertas',\n        active: false\n      }, {\n        state: 'closed',\n        label: 'Fechadas',\n        active: false\n      }],\n      filterIndex: 0,\n      page: 1\n    };\n\n    this.loadIssues = async () => {\n      const match = this.props.match;\n      const _this$state = this.state,\n            filters = _this$state.filters,\n            filterIndex = _this$state.filterIndex,\n            page = _this$state.page;\n    };\n\n    this.handleSelectChange = async e => {\n      const typeSelected = e.target.value;\n      const repository = this.state.repository;\n      const issues = api.get(`/repos/${repository.owner.login}/${repository.name}/issues`, {\n        params: {\n          state: typeSelected,\n          per_page: 5\n        }\n      });\n      this.setState({\n        type: typeSelected,\n        issues: issues.data\n      });\n    };\n  }\n\n  async componentDidMount() {\n    const match = this.props.match;\n    const filters = this.state.filters;\n    const repoName = decodeURIComponent(match.params.repository);\n\n    const _ref = await Promise.all([api.get(`/repos/${repoName}`), api.get(`/repos/${repoName}/issues`, {\n      params: {\n        state: filters.find(f => f.active).state,\n        per_page: 5\n      }\n    })]),\n          _ref2 = _slicedToArray(_ref, 2),\n          repository = _ref2[0],\n          issues = _ref2[1];\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          repository = _this$state2.repository,\n          issues = _this$state2.issues,\n          loading = _this$state2.loading;\n\n    if (loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Carregando...\");\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Owner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Voltar aos reposit\\xF3rios\"), React.createElement(\"img\", {\n      src: repository.owner.avatar_url,\n      alt: repository.owner.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, repository.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, repository.description)), React.createElement(Selected, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Listar: \"), React.createElement(\"select\", {\n      name: \"issueType\",\n      onChange: this.handleSelectChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"all\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Todas\"), React.createElement(\"option\", {\n      value: \"open\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Abertas\"), React.createElement(\"option\", {\n      value: \"closed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Fechadas\"))), React.createElement(IssueList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, issues.map(issue => React.createElement(\"li\", {\n      key: String(issue.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: issue.user.avatar_url,\n      alt: issue.user.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: issue.html_url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, issue.title), issue.labels.map(label => React.createElement(\"span\", {\n      key: String(label.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, label.name))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, issue.user.login))))));\n  }\n\n}\nRepository.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      repository: PropTypes.string\n    })\n  }).isRequired\n};","map":{"version":3,"sources":["/home/felipe/desafio5/src/pages/Repository/index.js"],"names":["React","Component","Link","PropTypes","api","Container","Loading","Owner","IssueList","Selected","Repository","state","repository","issues","loading","filters","label","active","filterIndex","page","loadIssues","match","props","handleSelectChange","e","typeSelected","target","value","get","owner","login","name","params","per_page","setState","type","data","componentDidMount","repoName","decodeURIComponent","Promise","all","find","f","render","avatar_url","description","map","issue","String","id","user","html_url","title","labels","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\nimport Container from '../../components/Container';\n\nimport { Loading, Owner, IssueList, Selected } from './styles';\n\nexport default class Repository extends Component {\n  state = {\n    repository: {},\n    issues: [],\n    loading: true,\n    filters: [\n      { state: 'all', label: 'Todas', active: true },\n      { state: 'open', label: 'Abertas', active: false },\n      { state: 'closed', label: 'Fechadas', active: false },\n    ],\n    filterIndex: 0,\n    page: 1,\n  };\n\n  async componentDidMount() {\n    const { match } = this.props;\n    const { filters } = this.state;\n\n    const repoName = decodeURIComponent(match.params.repository);\n\n    const [repository, issues] = await Promise.all([\n      api.get(`/repos/${repoName}`),\n      api.get(`/repos/${repoName}/issues`, {\n        params: {\n          state: filters.find(f => f.active).state,\n          per_page: 5,\n        },\n      }),\n    ]);\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false,\n    });\n  }\n\n  loadIssues =  async () => {\n    const { match } = this.props;\n    const { filters, filterIndex, page } = this.state;\n  }\n\n  handleSelectChange = async e => {\n    const typeSelected = e.target.value;\n    const { repository } = this.state;\n\n    const issues = api.get(\n      `/repos/${repository.owner.login}/${repository.name}/issues`,\n      {\n        params: {\n          state: typeSelected,\n          per_page: 5,\n        },\n      }\n    );\n\n    this.setState({\n      type: typeSelected,\n      issues: issues.data,\n    });\n  };\n\n  render() {\n    const { repository, issues, loading } = this.state;\n\n    if (loading) {\n      return <Loading>Carregando...</Loading>;\n    }\n    return (\n      <Container>\n        <Owner>\n          <Link to=\"/\">Voltar aos repositórios</Link>\n          <img src={repository.owner.avatar_url} alt={repository.owner.login} />\n          <h1>{repository.name}</h1>\n          <p>{repository.description}</p>\n        </Owner>\n\n        <Selected>\n          <span>Listar: </span>\n          <select name=\"issueType\" onChange={this.handleSelectChange}>\n            <option value=\"all\">Todas</option>\n            <option value=\"open\">Abertas</option>\n            <option value=\"closed\">Fechadas</option>\n          </select>\n        </Selected>\n\n        <IssueList>\n          {issues.map(issue => (\n            <li key={String(issue.id)}>\n              <img src={issue.user.avatar_url} alt={issue.user.login} />\n              <div>\n                <strong>\n                  <a href={issue.html_url}>{issue.title}</a>\n                  {issue.labels.map(label => (\n                    <span key={String(label.id)}>{label.name}</span>\n                  ))}\n                </strong>\n                <p>{issue.user.login}</p>\n              </div>\n            </li>\n          ))}\n        </IssueList>\n      </Container>\n    );\n  }\n}\n\nRepository.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      repository: PropTypes.string,\n    }),\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}