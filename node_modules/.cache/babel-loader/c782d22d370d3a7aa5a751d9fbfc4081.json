{"ast":null,"code":"var _jsxFileName = \"/home/felipe/desafio5/src/pages/Main/index.js\";\nimport React, { Component } from 'react';\nimport { FaGithubAlt, FaPlus, FaSpinner } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\nimport api from '../../services/api';\nimport Container from '../../components/Container';\nimport { Form, SubmitButton, List, Error } from './styles';\nexport default class Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newRepo: '',\n      repositories: [],\n      loading: false,\n      valid: true,\n      errorMessage: ''\n    };\n\n    this.handleInputChange = e => {\n      this.setState({\n        newRepo: e.target.value\n      });\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      this.setState({\n        loading: true\n      });\n\n      try {\n        const getStyle = valid => ({\n          border: valid ? '' : '1px solid red'\n        });\n\n        const _this$state = this.state,\n              newRepo = _this$state.newRepo,\n              repositories = _this$state.repositories;\n        const repoExists = repositories.find(repo => repo.name === newRepo);\n        if (repoExists) throw 'Repositório duplicado!', getStyle;\n        const response = await api.get(`/repos/${newRepo}`);\n        const data = {\n          name: response.data.full_name\n        };\n        this.setState({\n          repositories: [...repositories, data],\n          newRepo: '',\n          errorMessage: '',\n          loading: false,\n          valid: true\n        });\n      } catch (error) {\n        let message = '';\n\n        if (error !== 'Repositório duplicado!') {\n          message = 'Repositório inexistente';\n        } else message = error;\n\n        this.setState({\n          valid: false,\n          newRepo: '',\n          errorMessage: message\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    const repositories = localStorage.getItem('repositories');\n\n    if (repositories) {\n      this.setState({\n        repositories: JSON.parse(repositories)\n      });\n    }\n  }\n\n  componentDidUpdate(_, prevState) {\n    const repositories = this.state.repositories;\n\n    if (prevState.repositories !== repositories) {\n      localStorage.setItem('repositories', JSON.stringify(repositories));\n    }\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          newRepo = _this$state2.newRepo,\n          repositories = _this$state2.repositories,\n          loading = _this$state2.loading,\n          errorMessage = _this$state2.errorMessage,\n          valid = _this$state2.valid,\n          getStyle = _this$state2.getStyle;\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(FaGithubAlt, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), \"Reposit\\xF3rios\"), React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Adicionar reposit\\xF3rio\",\n      value: newRepo,\n      onChange: this.handleInputChange,\n      style: getStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(SubmitButton, {\n      loading: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, loading ? React.createElement(FaSpinner, {\n      color: \"#FFF\",\n      size: 14,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }) : React.createElement(FaPlus, {\n      color: \"#FFF\",\n      size: 14,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }))), valid ? React.createElement(React.Fragment, null) : React.createElement(Error, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, errorMessage), React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, repositories.map(repository => React.createElement(\"li\", {\n      key: repository.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, repository.name), React.createElement(Link, {\n      to: `/repository/${encodeURIComponent(repository.name)}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Detalhes\")))));\n  }\n\n}","map":{"version":3,"sources":["/home/felipe/desafio5/src/pages/Main/index.js"],"names":["React","Component","FaGithubAlt","FaPlus","FaSpinner","Link","api","Container","Form","SubmitButton","List","Error","Main","state","newRepo","repositories","loading","valid","errorMessage","handleInputChange","e","setState","target","value","handleSubmit","preventDefault","getStyle","border","repoExists","find","repo","name","response","get","data","full_name","error","message","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","_","prevState","setItem","stringify","render","map","repository","encodeURIComponent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport { FaGithubAlt, FaPlus, FaSpinner } from 'react-icons/fa';\n\nimport { Link } from 'react-router-dom';\n\nimport api from '../../services/api';\n\nimport Container from '../../components/Container';\n\nimport { Form, SubmitButton, List, Error } from './styles';\n\nexport default class Main extends Component {\n  state = {\n    newRepo: '',\n    repositories: [],\n    loading: false,\n    valid: true,\n    errorMessage: '',\n  };\n\n  componentDidMount() {\n    const repositories = localStorage.getItem('repositories');\n\n    if (repositories) {\n      this.setState({ repositories: JSON.parse(repositories) });\n    }\n  }\n\n  componentDidUpdate(_, prevState) {\n    const { repositories } = this.state;\n\n    if (prevState.repositories !== repositories) {\n      localStorage.setItem('repositories', JSON.stringify(repositories));\n    }\n  }\n\n  handleInputChange = e => {\n    this.setState({ newRepo: e.target.value });\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n\n    this.setState({\n      loading: true,\n    });\n\n    try {\n      const getStyle = valid => ({\n        border: valid ? '' : '1px solid red',\n      });\n\n      const { newRepo, repositories } = this.state;\n\n      const repoExists = repositories.find(repo => repo.name === newRepo);\n\n      if (repoExists) throw ('Repositório duplicado!', getStyle);\n\n      const response = await api.get(`/repos/${newRepo}`);\n\n      const data = {\n        name: response.data.full_name,\n      };\n\n      this.setState({\n        repositories: [...repositories, data],\n        newRepo: '',\n        errorMessage: '',\n        loading: false,\n        valid: true,\n      });\n    } catch (error) {\n      let message = '';\n\n      if (error !== 'Repositório duplicado!') {\n        message = 'Repositório inexistente';\n      } else message = error;\n\n      this.setState({ valid: false, newRepo: '', errorMessage: message });\n    }\n\n    this.setState({ loading: false });\n  };\n\n  render() {\n    const {\n      newRepo,\n      repositories,\n      loading,\n      errorMessage,\n      valid,\n      getStyle,\n    } = this.state;\n\n    return (\n      <Container>\n        <h1>\n          <FaGithubAlt />\n          Repositórios\n        </h1>\n\n        <Form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Adicionar repositório\"\n            value={newRepo}\n            onChange={this.handleInputChange}\n            style={getStyle}\n          />\n          <SubmitButton loading={loading}>\n            {loading ? (\n              <FaSpinner color=\"#FFF\" size={14} />\n            ) : (\n              <FaPlus color=\"#FFF\" size={14} />\n            )}\n          </SubmitButton>\n        </Form>\n        {valid ? <></> : <Error>{errorMessage}</Error>}\n        <List>\n          {repositories.map(repository => (\n            <li key={repository.name}>\n              <span>{repository.name}</span>\n              <Link to={`/repository/${encodeURIComponent(repository.name)}`}>\n                Detalhes\n              </Link>\n            </li>\n          ))}\n        </List>\n      </Container>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}